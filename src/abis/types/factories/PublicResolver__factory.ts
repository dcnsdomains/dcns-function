/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  PublicResolver,
  PublicResolverInterface,
} from "../PublicResolver";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract Registry",
        name: "_registry",
        type: "address",
      },
      {
        internalType: "contract INameWrapper",
        name: "wrapperAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "node",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "a",
        type: "address",
      },
    ],
    name: "AddrChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "node",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
    ],
    name: "NameChanged",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "node",
        type: "bytes32",
      },
    ],
    name: "addr",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "node",
        type: "bytes32",
      },
    ],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "node",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "setAddr",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "node",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "newName",
        type: "string",
      },
    ],
    name: "setName",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceID",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620014b2380380620014b2833981810160405281019062000037919062000184565b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620001cb565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f382620000c6565b9050919050565b60006200010782620000e6565b9050919050565b6200011981620000fa565b81146200012557600080fd5b50565b60008151905062000139816200010e565b92915050565b60006200014c82620000e6565b9050919050565b6200015e816200013f565b81146200016a57600080fd5b50565b6000815190506200017e8162000153565b92915050565b600080604083850312156200019e576200019d620000c1565b5b6000620001ae8582860162000128565b9250506020620001c1858286016200016d565b9150509250929050565b6112d780620001db6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063773722131161005b5780637737221314610112578063a22cb4651461012e578063d5fa2b001461014a578063e985e9c5146101665761007d565b806301ffc9a7146100825780633b3b57de146100b2578063691f3431146100e2575b600080fd5b61009c60048036038101906100979190610a14565b610196565b6040516100a99190610a5c565b60405180910390f35b6100cc60048036038101906100c79190610aad565b610278565b6040516100d99190610b1b565b60405180910390f35b6100fc60048036038101906100f79190610aad565b6102b4565b6040516101099190610bc6565b60405180910390f35b61012c60048036038101906101279190610d1d565b610359565b005b61014860048036038101906101439190610dd1565b6103ca565b005b610164600480360381019061015f9190610e11565b610535565b005b610180600480360381019061017b9190610e51565b6105d6565b60405161018d9190610a5c565b60405180910390f35b60007fef3eb579000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061026157507f1fd7df85000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061027157506102708261066a565b5b9050919050565b600080600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60606001600083815260200190815260200160002080546102d490610ec0565b80601f016020809104026020016040519081016040528092919081815260200182805461030090610ec0565b801561034d5780601f106103225761010080835404028352916020019161034d565b820191906000526020600020905b81548152906001019060200180831161033057829003601f168201915b50505050509050919050565b81610363816106e4565b61036c57600080fd5b8160016000858152602001908152602001600020908161038c91906110a7565b50827fb7d29e911041e8d9b843369e890bcb72c9388692ba48b65ac54e7214c4c348f7836040516103bd9190610bc6565b60405180910390a2505050565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610438576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042f906111eb565b60405180910390fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516105299190610a5c565b60405180910390a35050565b8161053f816106e4565b61054857600080fd5b827f52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd2836040516105789190610b1b565b60405180910390a28160008085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f691f3431000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806106dd57506106dc826108c4565b5b9050919050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3846040518263ffffffff1660e01b8152600401610742919061121a565b602060405180830381865afa15801561075f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610783919061124a565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361087c57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e8460001c6040518263ffffffff1660e01b81526004016108389190611286565b602060405180830381865afa158015610855573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610879919061124a565b90505b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806108bc57506108bb81336105d6565b5b915050919050565b60007f3b3b57de000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061093757506109368261093e565b5b9050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6109f1816109bc565b81146109fc57600080fd5b50565b600081359050610a0e816109e8565b92915050565b600060208284031215610a2a57610a296109b2565b5b6000610a38848285016109ff565b91505092915050565b60008115159050919050565b610a5681610a41565b82525050565b6000602082019050610a716000830184610a4d565b92915050565b6000819050919050565b610a8a81610a77565b8114610a9557600080fd5b50565b600081359050610aa781610a81565b92915050565b600060208284031215610ac357610ac26109b2565b5b6000610ad184828501610a98565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b0582610ada565b9050919050565b610b1581610afa565b82525050565b6000602082019050610b306000830184610b0c565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b70578082015181840152602081019050610b55565b60008484015250505050565b6000601f19601f8301169050919050565b6000610b9882610b36565b610ba28185610b41565b9350610bb2818560208601610b52565b610bbb81610b7c565b840191505092915050565b60006020820190508181036000830152610be08184610b8d565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c2a82610b7c565b810181811067ffffffffffffffff82111715610c4957610c48610bf2565b5b80604052505050565b6000610c5c6109a8565b9050610c688282610c21565b919050565b600067ffffffffffffffff821115610c8857610c87610bf2565b5b610c9182610b7c565b9050602081019050919050565b82818337600083830152505050565b6000610cc0610cbb84610c6d565b610c52565b905082815260208101848484011115610cdc57610cdb610bed565b5b610ce7848285610c9e565b509392505050565b600082601f830112610d0457610d03610be8565b5b8135610d14848260208601610cad565b91505092915050565b60008060408385031215610d3457610d336109b2565b5b6000610d4285828601610a98565b925050602083013567ffffffffffffffff811115610d6357610d626109b7565b5b610d6f85828601610cef565b9150509250929050565b610d8281610afa565b8114610d8d57600080fd5b50565b600081359050610d9f81610d79565b92915050565b610dae81610a41565b8114610db957600080fd5b50565b600081359050610dcb81610da5565b92915050565b60008060408385031215610de857610de76109b2565b5b6000610df685828601610d90565b9250506020610e0785828601610dbc565b9150509250929050565b60008060408385031215610e2857610e276109b2565b5b6000610e3685828601610a98565b9250506020610e4785828601610d90565b9150509250929050565b60008060408385031215610e6857610e676109b2565b5b6000610e7685828601610d90565b9250506020610e8785828601610d90565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610ed857607f821691505b602082108103610eeb57610eea610e91565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610f537fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610f16565b610f5d8683610f16565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000610fa4610f9f610f9a84610f75565b610f7f565b610f75565b9050919050565b6000819050919050565b610fbe83610f89565b610fd2610fca82610fab565b848454610f23565b825550505050565b600090565b610fe7610fda565b610ff2818484610fb5565b505050565b5b818110156110165761100b600082610fdf565b600181019050610ff8565b5050565b601f82111561105b5761102c81610ef1565b61103584610f06565b81016020851015611044578190505b61105861105085610f06565b830182610ff7565b50505b505050565b600082821c905092915050565b600061107e60001984600802611060565b1980831691505092915050565b6000611097838361106d565b9150826002028217905092915050565b6110b082610b36565b67ffffffffffffffff8111156110c9576110c8610bf2565b5b6110d38254610ec0565b6110de82828561101a565b600060209050601f83116001811461111157600084156110ff578287015190505b611109858261108b565b865550611171565b601f19841661111f86610ef1565b60005b8281101561114757848901518255600182019150602085019450602081019050611122565b868310156111645784890151611160601f89168261106d565b8355505b6001600288020188555050505b505050505050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b60006111d5602983610b41565b91506111e082611179565b604082019050919050565b60006020820190508181036000830152611204816111c8565b9050919050565b61121481610a77565b82525050565b600060208201905061122f600083018461120b565b92915050565b60008151905061124481610d79565b92915050565b6000602082840312156112605761125f6109b2565b5b600061126e84828501611235565b91505092915050565b61128081610f75565b82525050565b600060208201905061129b6000830184611277565b9291505056fea2646970667358221220325366d85f792f3260c221e352d0c96de41ff4f8b6802c7fe9b14d5fd48cfdb064736f6c63430008110033";

type PublicResolverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PublicResolverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PublicResolver__factory extends ContractFactory {
  constructor(...args: PublicResolverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _registry: PromiseOrValue<string>,
    wrapperAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PublicResolver> {
    return super.deploy(
      _registry,
      wrapperAddress,
      overrides || {}
    ) as Promise<PublicResolver>;
  }
  override getDeployTransaction(
    _registry: PromiseOrValue<string>,
    wrapperAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _registry,
      wrapperAddress,
      overrides || {}
    );
  }
  override attach(address: string): PublicResolver {
    return super.attach(address) as PublicResolver;
  }
  override connect(signer: Signer): PublicResolver__factory {
    return super.connect(signer) as PublicResolver__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PublicResolverInterface {
    return new utils.Interface(_abi) as PublicResolverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PublicResolver {
    return new Contract(address, _abi, signerOrProvider) as PublicResolver;
  }
}
